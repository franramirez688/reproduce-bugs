diff --git a/README.md b/README.md
new file mode 100644
index 0000000..bf5369c
--- /dev/null
+++ b/README.md
@@ -0,0 +1,17 @@
+Conan non-SONAME example
+=========================
+
+This example is simulating the next graph:
+
+```
+LibNoSoname' -> 'OtherLib' -> 'Executable'
+```
+
+Where:
+
+* LibNoSoname == `nosoname/1.0`
+* OtherLib == `libB/1.0`
+* Executable == `nosoname/1.0`
+
+- Issue related: https://github.com/conan-io/conan/issues/3230
+- Howto: run `./build.sh` in your command prompt (needs Conan installed)
diff --git a/test_package/CMakeLists.txt b/app/CMakeLists.txt
similarity index 53%
rename from test_package/CMakeLists.txt
rename to app/CMakeLists.txt
index cbd1c30..54c6f22 100644
--- a/test_package/CMakeLists.txt
+++ b/app/CMakeLists.txt
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 3.15)
 project(PackageTest CXX)
 
-find_package(nosoname CONFIG REQUIRED)
+find_package(libB CONFIG REQUIRED)
 
 add_executable(example src/example.cpp)
-target_link_libraries(example nosoname::nosoname)
+target_link_libraries(example libB::libB)
diff --git a/app/conanfile.txt b/app/conanfile.txt
new file mode 100644
index 0000000..2101652
--- /dev/null
+++ b/app/conanfile.txt
@@ -0,0 +1,6 @@
+[requires]
+libB/1.0
+
+[generators]
+CMakeDeps
+CMakeToolchain
\ No newline at end of file
diff --git a/app/src/example.cpp b/app/src/example.cpp
new file mode 100644
index 0000000..960a796
--- /dev/null
+++ b/app/src/example.cpp
@@ -0,0 +1,5 @@
+#include "libB.h"
+
+int main() {
+    libB();
+}
diff --git a/build.sh b/build.sh
new file mode 100755
index 0000000..c243443
--- /dev/null
+++ b/build.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+
+CUR_DIR=$(pwd)
+echo "---------------- Creating the library without SONAME - nosoname/1.0"
+conan create nosoname/conanfile.py
+echo "---------------- Creating the library libB/1.0 which depends on nosoname/1.0"
+conan create libB/conanfile.py
+echo "---------------- Building application which consumes libB/1.0"
+cd app && conan install . -if build
+cd build && cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE="./conan_toolchain.cmake" .. && cmake --build .
+echo "---------------- Executing the application"
+./example
+echo "---------------- Everything was fine!"
+cd $CUR_DIR
diff --git a/libB/CMakeLists.txt b/libB/CMakeLists.txt
new file mode 100644
index 0000000..c7fbbd1
--- /dev/null
+++ b/libB/CMakeLists.txt
@@ -0,0 +1,15 @@
+cmake_minimum_required(VERSION 3.15)
+project(libB CXX)
+
+find_package(nosoname CONFIG REQUIRED)
+
+add_library(libB src/libB.cpp)
+target_link_libraries(libB nosoname::nosoname)
+
+set_target_properties(libB PROPERTIES PUBLIC_HEADER "src/libB.h")
+install(TARGETS libB DESTINATION "."
+        PUBLIC_HEADER DESTINATION include
+        RUNTIME DESTINATION bin
+        ARCHIVE DESTINATION lib
+        LIBRARY DESTINATION lib
+        )
diff --git a/libB/conanfile.py b/libB/conanfile.py
new file mode 100644
index 0000000..be538a1
--- /dev/null
+++ b/libB/conanfile.py
@@ -0,0 +1,38 @@
+from conans import ConanFile
+from conan.tools.cmake import CMakeToolchain, CMake
+from conan.tools.layout import cmake_layout
+
+
+class LibBConan(ConanFile):
+    name = "libB"
+    version = "1.0"
+
+    # Binary configuration
+    settings = "os", "compiler", "build_type", "arch"
+    options = {"shared": [True, False], "fPIC": [True, False]}
+    default_options = {"shared": True, "fPIC": True}
+
+    # Sources are located in the same place as this recipe, copy them to the recipe
+    exports_sources = "CMakeLists.txt", "src/*"
+    # requires
+    requires = "nosoname/1.0"
+    generators = "CMakeDeps", "CMakeToolchain"
+
+    def config_options(self):
+        if self.settings.os == "Windows":
+            del self.options.fPIC
+
+    def layout(self):
+        cmake_layout(self)
+
+    def build(self):
+        cmake = CMake(self)
+        cmake.configure()
+        cmake.build()
+
+    def package(self):
+        cmake = CMake(self)
+        cmake.install()
+
+    def package_info(self):
+        self.cpp_info.libs = ["libB"]
diff --git a/libB/src/libB.cpp b/libB/src/libB.cpp
new file mode 100644
index 0000000..21768c1
--- /dev/null
+++ b/libB/src/libB.cpp
@@ -0,0 +1,7 @@
+#include <iostream>
+#include "libB.h"
+#include "nosoname.h"
+
+void libB(){
+    nosoname();
+}
diff --git a/libB/src/libB.h b/libB/src/libB.h
new file mode 100644
index 0000000..0159d48
--- /dev/null
+++ b/libB/src/libB.h
@@ -0,0 +1,9 @@
+#pragma once
+
+#ifdef WIN32
+  #define libB_EXPORT __declspec(dllexport)
+#else
+  #define libB_EXPORT
+#endif
+
+libB_EXPORT void libB();
diff --git a/CMakeLists.txt b/nosoname/CMakeLists.txt
similarity index 100%
rename from CMakeLists.txt
rename to nosoname/CMakeLists.txt
diff --git a/conanfile.py b/nosoname/conanfile.py
similarity index 75%
rename from conanfile.py
rename to nosoname/conanfile.py
index b5d50c2..555dae1 100644
--- a/conanfile.py
+++ b/nosoname/conanfile.py
@@ -7,13 +7,6 @@ class NosonameConan(ConanFile):
     name = "nosoname"
     version = "1.0"
 
-    # Optional metadata
-    license = "<Put the package license here>"
-    author = "<Put your name here> <And your email here>"
-    url = "<Package recipe repository url here, for issues about the package>"
-    description = "<Description of Nosoname here>"
-    topics = ("<Put some tag here>", "<here>", "<and here>")
-
     # Binary configuration
     settings = "os", "compiler", "build_type", "arch"
     options = {"shared": [True, False], "fPIC": [True, False]}
diff --git a/src/nosoname.cpp b/nosoname/src/nosoname.cpp
similarity index 100%
rename from src/nosoname.cpp
rename to nosoname/src/nosoname.cpp
diff --git a/src/nosoname.h b/nosoname/src/nosoname.h
similarity index 100%
rename from src/nosoname.h
rename to nosoname/src/nosoname.h
diff --git a/test_package/conanfile.py b/test_package/conanfile.py
deleted file mode 100644
index 975f783..0000000
--- a/test_package/conanfile.py
+++ /dev/null
@@ -1,26 +0,0 @@
-import os
-
-from conans import ConanFile, tools
-from conan.tools.cmake import CMake
-from conan.tools.layout import cmake_layout
-
-
-class NosonameTestConan(ConanFile):
-    settings = "os", "compiler", "build_type", "arch"
-    # VirtualBuildEnv and VirtualRunEnv can be avoided if "tools.env.virtualenv:auto_use" is defined
-    # (it will be defined in Conan 2.0)
-    generators = "CMakeDeps", "CMakeToolchain", "VirtualBuildEnv", "VirtualRunEnv"
-    apply_env = False
-
-    def build(self):
-        cmake = CMake(self)
-        cmake.configure()
-        cmake.build()
-
-    def layout(self):
-        cmake_layout(self)
-
-    def test(self):
-        if not tools.cross_building(self):
-            cmd = os.path.join(self.cpp.build.bindirs[0], "example")
-            self.run(cmd, env="conanrun")
diff --git a/test_package/src/example.cpp b/test_package/src/example.cpp
deleted file mode 100644
index 90965f3..0000000
--- a/test_package/src/example.cpp
+++ /dev/null
@@ -1,5 +0,0 @@
-#include "nosoname.h"
-
-int main() {
-    nosoname();
-}
